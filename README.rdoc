= ldap-binder

This gem provides a higher-level abstraction for managing users in an LDAP directory tree. The
idea is to hide all the details of working with LDAP from the users of the external API. Time
will tell how well this has succeeded.

This gem can be used with Rails or without Rails. We provide nothing fancy like ActiveRecord, 
but we provide a configuration mechanism not unlike database yml.

If you are converting your user base from a database-based user management system and the password
hashing scheme you use is not compatible with the default set of schemes supported by LDAP, this
gem provides a mechanism to allow you to leverage these existing passwords (your users don't have
to change their passwords). More about this below.

Some functionality of ldap-binder assumes the use of the 'ppolicy' LDAP overlay. This overlay
provides things like pasword history and password change times, etc. You can use the gem without
this overlay, but more functionality is available if it is there.

== Configuration

By default ldap-binder expects to find the LDAP configuration in "./config/ldap.yml" or, if 
you are in a Rails environment in "#{Rails.root}/config/ldap.yml". You can programmatically 
specify the the name and location of the configuration file if you choose: see the
LdapBinder::Connection.config_path/config_base_path class methods. The configuration also
supports an 'environment' setting much like the Rails environments (production, test,
development, etc.) In fact, in a Rails environment, the gem will use the current rails 
environment, just like it does in the database.yml.

The configuration file looks as follows:

  development:
    host: <ldap-host>
    port: <ldap-port, e.g. 389>
    manager-dn: <dn of the application user for ldap, see below>
    manager-pw: <password for the application user for ldap>
    application-users-ou: <the organization containing all the application users>
    user-subgroup-ou: <the organizational subgroup for application-users>
    root-dn: <the root dn of your LDAP tree>

  test:
    ...

  production:
    ...

The so-called 'manager' is the LDAP equivalent of your application's database credentials. The 
'manager' is allowed to completely manage your application users. Typically, you would use
ACL's in LDAP to restrict the rights of the 'manager' to working with only the application
users and will not be permitted to make any structural modifications to the directory tree.

For a configuration example, let's assume that your ldap host is running on 'ldap.company.com'
on port 389. The directory tree structure looks as follows:

  dc=company,dc=com              # Root dn
    ou=applicationUsers          # All application users
      ou=training                # All application users on training system
        cn=training-user1

The 'manager' user has a dn of "cn=Manager,dc=company,dc=com" with a password of 'test1234'. (NOTE:
The 'manager' user is typically NOT a member of the application-users tree. Work with your
IT department to determine the actual location, if necessary). 

The example above would result in a configuration file as follows:

  production:
    host: ldap.company.com
    port: 389
    manager-dn: cn=Manager,dc=company,dc=com
    manager-pw: test1234
    root-dn: dc-company,dc=com
    application-users-ou: ou=applicationUsers
    user-subgroup-ou: ou=training

== The API

The API exposed by ldap-binder is composed of two major sets of functionality: manager actions
and user actions.

The manager actions are those carried out by the application manager and are performed only if 
the configured manager can bind to LDAP (using the configured credentials).

The user actions are those carried out by application users and can be performed only if the
application user can successfully bind to LDAP.

The following sub-sections describe the supported calls in detail.

=== Manager Actions

==== user_search

The user_search method takes a hash of the criteria to use for the search and returns
a hash containing the attributes of the user in LDAP. nil is returned if the user is not
found.

The criteria hash can contain the following keys and will use the keys in the following order:

1. :uuid - the generic unique identifier of the user (LDAP 'uid')
2. :login - user login (LDAP 'cn')
3. :token - single signon token (LDAP 'userPassword' - Plain text. See below)
4. :token and :account_uid - single signon token (LDAP 'userPassword') and account identifier
   (LDAP 'ou')

The following attributes are returned from LDAP:
* cn - User login
* mail - Email address
* sn - Surname/last name
* givenName - First name
* description - General notes
* uid - Generic unique user id - generated by the gem
* destinationIndicator - Used for password salt in non-conformant passwords.
* pwdChangedTime - The last time the 'userPassword' attribute was modified. Requires 'ppolicy'
* pwdHistory - The list of the previous passwords for the user. Requires 'ppolicy'
* pwdFailureTime - The time of the last bind failure for the user. Requires 'ppolicy'
* createTimestamp - The creation time of the user
* ou - The unique account ids to which the user is associated
* businessCategory - The unique application ids to which the user is associated.

Example:

  # Search for a user by login
  require 'ldap-binder'

  user_info = LdapBinder::Connection.mgr.user_search login: 'joe'

==== add_user

The add_user method takes a hash of the attributes to be associated with the new user and
creates the new user in LDAP. It returns a hash containing the dn and uuid of the newly
created user.

The following attributes are required to create a new user in LDAP:

1. :login (LDAP 'cn')
2. :last (LDAP 'sn')
3. :password (LDAP 'userPassword) - clear text

The following are additional optional attributes that can be specified:

1. :first (LDAP 'givenName')
2. :email (LDAP 'mail')
3. :note (LDAP 'description')
4. :salt (LDAP 'destinationIndicator') See details on non-conformant password usage.
5. :account_uid (LDAP 'ou')
6. :application_uid (LDAP 'businessCategory')

Example:

  # Add a new user
  require 'ldap-binder'

  user_info = { login: 'joe', last: 'smith', password: 'test123' }
  result = LdapBinder::Connection.mgr user_info

  puts "dn = #{result[:dn]}, uuid = #{result[:uuid]}"

==== update_user

The update_user method allows you to modify attributes of a user in LDAP. It returns a
hash containing the user's dn and uuid.

The following attributes can be updated:

1. :first (LDAP 'givenName')
2. :last (LDAP 'sn')
3. :email (LDAP 'mail')
4. :note (LDAP 'description')

For non-required attributes, if the attribute is not specified in the input user attributes
or is empty, the attribute will be removed from LDAP.

The user's login (LDAP 'cn') may be changed, but be aware that this will change the users'
distinguised name.

If :password is specified, the user's password will be changed, but the change will not be
subject to any password history rules.

Example:

  # Modify a user's first name
  require 'ldap-binder'

  result = LdapBinder::Connection.mgr.update_user login: 'joe', first: 'Joseph'
  puts "dn = #{result[:dn]}, uuid = #{result[:uuid]}"

==== delete_all_users

This method will remove all users from the LDAP directory tree.

Example:

  require 'ldap-binder'

  LdapBinder::Connection.mgr.delete_all_users

==== delete_user

This method will delete the user specified in the criteria. The criteria specified can be
anything that is used by the 'user_search' method with one additional type: 

* :dn - The distinguised name of the user to delete.

Returns the distinguished name of the deleted user.

Example:

  require 'ldap-binder'

  dn = LdapBinder::Connection.mgr.delete_user(login: 'joe')

==== link_user

This method leverages the application_uid (LDAP 'businessCategory') and account_uid (LDAP 'ou') 
perform a kind of reference counting. So, here's how it works:

A user can be associated with zero or more applications (single signong) and a user can be
associated with zero or more "accounts". This allows administrative control over the user
by an administrator of those "accounts".

When a user is 'unlinked' from the last of his/her applications or accounts, the user will
be deleted (see unlink_user).

The link_user method takes two hashes. The first hash is user search criteria (see user_search)
and the second hash will contain one or both of :application_uid and :account_uid. It returns
a hash containing the user's dn and uuid.

Example:

  # Add the user to a new application
  require 'ldap-binder'

  result = LdapBinder::Connection.mgr.link_user { login: 'joe' }, { application_uid: 'myapp' }


==== unlink_user

This method unlinks a user from either an account or an application or both. If the last
reference to an account or application is removed, the user is deleted from the directory
tree.

The first parameter is the uuid of the user to unlink. The second is a hash containing
one or both of :application_uid and :account_uid. It returns the 'dn' of the user.

Example:

  # Unlink the user from an account
  require 'ldap-binder'

  dn = LdapBinder::Connection.mgr.unlink_user('the_uuid', { account_uid: 'account_3' })

=== User Actions

==== authenticate

This method determines if the user has provided vaid credentials to bind to LDAP. The parameter
is a hash containing the user's credentials. The hash can take the form of:

* :login and :password
* :token
* :token and :account_uid

The data associated with the user is returned if bound successfully to LDAP. If the user
isn't found, nil is returned. If the user cannot be bound to LDAP, a LdapBinder::BindError is
raised.

Example:

  require 'ldap-binder'

  user_data = LdapBinder::Connection.mgr.authenticate(login: 'joe', password: 'abc123')

==== change_password

This method allows a user to change his/her password. Must specify the login, old password
and new password. Returns the user's information. nil if the user isn't found.

Example:

  require 'ldap-binder'
  
  user_info = LdapBinder::Connection.mgr.authenticate 'joe, 'abc123', 'bcd234'

== Legacy Passwords

If you are converting your existing user-base to LDAP, the last thing you want to do is
to force your users to change their passwords. You might think this would be the case if
you used a non-standard hashing mechanism for your old system that isn't compatible with
the binding mechanism supported by LDAP. ldap-binder gives you a way to get around this.

For example, let's say you use a salted hash to secure your passwords, but salting isn't
performed the way LDAP expects it to be if using one of its SSHA* types. Here's what you 
would do:

When migrating your users into LDAP using ldap-binder, set the salt of your password to
the :salt key and your original password to the :password key of the hash passed to 'add_user'.

In your application configuration, set the custom password hasher to use. This hasher is a
lambda or a proc which takes two parameters: password and salt. This method should generate
the hash against which to compare against the hash that you migrated into LDAP.

Example password hasher:

  require 'ldap-binder'

  LdapBinder::Connection.mgr.custom_password_hasher = ->(password, salt) { Digest::SHA1.hexdigest("--#{salt}--#{password}--") }

Now, when the user logs in the first time after the migration, the initial bind will occur
using the custom hasher and the stored salt. If the bind was successful, the salt attribute
will be removed from LDAP and the password will be re-hashed using an LDAP compatible scheme.

This will clean up your user passwords over time.

== Contributing to ldap-binder
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2013 Dave. See LICENSE.txt for
further details.

